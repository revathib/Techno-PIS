// Generated by CoffeeScript 1.7.1
(function() {
  app.service('AssignShift', function($http) {
    this.retrieveApplications = function() {
      return $http.get(dbServer + '/retrieveShifts', {
        params: {
          user: $.cookie("user")
        }
      }).success(function(data, status, headers, config) {
        return data;
      }).error(function(data, status, headers, config) {});
    };
    this.retrieveApplicationById = function(ApplicationId) {
      return $http.get(dbServer + '/retrieveShiftsId', {
        params: {
          ApplicationId: ApplicationId
        }
      }).success(function(data, status, headers, config) {
        return data;
      }).error(function(data, status, headers, config) {});
    };
    this.retrieveShiftForUser = function() {
      return $http.get(dbServer + '/retrieveShiftForUser', {
        params: {
          user: $.cookie("user")
        }
      }).success(function(data, status, headers, config) {
        return data;
      }).error(function(data, status, headers, config) {});
    };
    this.retrieveShiftType = function() {
      return $http.get(dbServer + '/retrieveShiftsTypes').success(function(data, status, headers, config) {
        return data;
      }).error(function(data, status, headers, config) {});
    };
    this.changeEmployeeShift = function(application, empId) {
      return $http.post(dbServer + '/changeEmployeeShift', {
        application: application,
        empId: empId
      }).success(function(data, status, headers, config) {
        return data;
      }).error(function(data, status, headers, config) {});
    };
  });

  app.controller('AssignShiftCtrl', function($scope, AssignShift, $filter, ngTableParams) {
    AssignShift.retrieveApplications().then(function(data) {
      data = data.data;
      $scope.dataTableHrManageShift = new ngTableParams({
        page: 1,
        count: 10
      }, {
        total: data.length,
        getData: function($defer, params) {
          var filteredData, orderedData;
          filteredData = (params.filter() ? $filter("filter")(data, params.filter()) : data);
          orderedData = (params.sorting() ? $filter("orderBy")(filteredData, params.orderBy()) : data);
          params.total(orderedData.length);
          $defer.resolve(orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count()));
        }
      });
    });
  });

  app.controller('AssignShiftEmpCtrl', function($scope, $stateParams, AssignShift) {
    AssignShift.retrieveApplicationById($stateParams.ApplicationID).then(function(data) {
      $scope.application = {
        fromDate: data.data.from,
        shiftType: data.data.shiftType,
        shiftTimings: data.data.shiftTimings
      };
      return $scope.EmpID = data.data.empId;
    });
    AssignShift.retrieveShiftType().then(function(data) {
      return $scope.shiftTypes = data.data;
    });
    $scope.changeShiftType = function() {
      return _.each($scope.shiftTypes, function(shiftTypes) {
        if (shiftTypes.shiftType === $scope.application.shiftType) {
          return $scope.application.shiftTimings = shiftTypes.shiftStart + '-' + shiftTypes.shiftEnd;
        }
      });
    };
    AssignShift.retrieveShiftForUser().then(function(data) {
      return $scope.applicationsOfEmployee = data.data;
    });
    $scope.Change = function() {
      return AssignShift.changeEmployeeShift($scope.application, $scope.EmpID).then(function(data) {
        if (data.data.result === true) {

        } else {

        }
        return AssignShift.retrieveShiftForUser().then(function(data) {
          return $scope.applicationsOfEmployee = data.data;
        });
      });
    };
  });

}).call(this);

//# sourceMappingURL=assignShift.map
