// Generated by CoffeeScript 1.7.1
(function() {
  app.service('LoanApply', function($http) {
    this.retrieveApplications = function() {
      return $http.get(dbServer + '/retrieveLoan', {
        params: {
          user: $.cookie("user")
        }
      }).success(function(data, status, headers, config) {
        return data;
      }).error(function(data, status, headers, config) {});
    };
    this.retrieveLoanTypes = function() {
      return $http.get(dbServer + '/retrieveLoanTypes', {
        params: {
          user: $.cookie("user")
        }
      }).success(function(data, status, headers, config) {
        return data;
      }).error(function(data, status, headers, config) {});
    };
    this.newLoanApplication = function(application) {
      return $http.post(dbServer + '/newLoanApplication', {
        params: {
          application: application,
          user: $.cookie("user")
        }
      }).success(function(data, status, headers, config) {
        return data;
      }).error(function(data, status, headers, config) {});
    };
  });

  app.controller('LoanApplyCtrl', function($scope, $stateParams, LoanApply, $filter, ngTableParams) {
    var loanList;
    $scope.application = {
      loanAmount: 0,
      duration: 1,
      rateOfInterest: 0,
      EMI: 0
    };
    loanList = function() {
      return LoanApply.retrieveApplications().then(function(data) {
        data = data.data;
        $scope.dataTableLoanApply = new ngTableParams({
          page: 1,
          count: 10
        }, {
          total: data.length,
          getData: function($defer, params) {
            var filteredData, orderedData;
            filteredData = (params.filter() ? $filter("filter")(data, params.filter()) : data);
            orderedData = (params.sorting() ? $filter("orderBy")(filteredData, params.orderBy()) : data);
            params.total(orderedData.length);
            $defer.resolve(orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count()));
          }
        });
      });
    };
    loanList();
    LoanApply.retrieveLoanTypes().then(function(data) {
      return $scope.loanType = data.data;
    });
    $scope.submit = function() {
      return LoanApply.newLoanApplication($scope.application).then(function(data) {
        if (data.data.result) {
          $scope.loan = true;
          loanList();
          return $scope.application = {
            loanType: "",
            loanAmount: 0,
            duration: 1,
            rateOfInterest: 0,
            EMI: 0
          };
        }
      });
    };
    $scope.changeLoanType = function() {
      if ($scope.application.loanType === null || $scope.application.loanType === void 0) {
        $scope.application.rateOfInterest = 0;
      }
      return _.each($scope.loanType, function(loanType) {
        if (loanType.loanType === $scope.application.loanType) {
          $scope.application.rateOfInterest = loanType.rateOfInterest;
          return $scope.calculateEMI();
        }
      });
    };
    $scope.calculateEMI = function() {
      var EMI, N, P, R;
      P = parseInt($scope.application.loanAmount);
      R = parseInt($scope.application.rateOfInterest) / 12 / 100;
      N = parseInt($scope.application.duration);
      EMI = P * R * Math.pow(1 + R, N) / (Math.pow(1 + R, N) - 1);
      return $scope.application.EMI = Math.round(EMI * 100) / 100;
    };
  });

}).call(this);

//# sourceMappingURL=loanApply.map
