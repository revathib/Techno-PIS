// Generated by CoffeeScript 1.6.3
app.service('levelService', function($http) {
  this.createNewLevel = function(levelCode, levelName, description) {
    console.log(levelCode);
    console.log(levelName);
    console.log(description);
    return $http.post(dbServer + '/addLevel', {
      params: {
        levelCode: levelCode,
        levelName: levelName,
        description: description
      }
    }).success(function(data, status, headers, config) {
      return data;
    }).error(function(data, status, headers, config) {});
  };
  this.retrieveLevels = function() {
    console.log("levels fetching.. ");
    return $http.get(dbServer + '/retrieveLevelsList').success(function(data) {
      console.log("retrieving levels...");
      return data;
    }).error(function(data, status, headers, config) {});
  };
  this.updateLevel = function(levelID, levelCode, level, description) {
    return $http.post(dbServer + '/updateLevel', {
      params: {
        levelId: levelID,
        levelCode: levelCode,
        levelName: level,
        description: description
      }
    }).success(function(data, status, headers, config) {
      return data;
    }).error(function(data, status, headers, config) {});
  };
  this.deleteLevel = function(levelId) {
    return $http.post(dbServer + '/deleteLevel', {
      params: {
        levelId: levelId
      }
    }).success(function(data, status, headers, config) {
      return data;
    }).error(function(data, status, headers, config) {});
  };
  this.retrieveLevelById = function(levelId) {
    return $http.get(dbServer + '/retrieveLevelById', {
      params: {
        levelId: levelId
      }
    }).success(function(data) {
      return data;
    }).error(function(data) {
      return console.log('error in Retrieve of Level By Id');
    });
  };
  this.editLevelDetails = function(levelId) {
    return $http.post(dbServer + 'editLevel', {
      levelId: levelId
    }).success(function(data) {
      return data;
    }).error(function(data) {
      return console.log('Error in Edit Level ');
    });
  };
});

app.controller('LevelsCtrl', function($scope, levelService, $filter, ngTableParams, $location, $stateParams, $window) {
  levelService.retrieveLevels().then(function(data) {
    console.log("level controller");
    data = data.data;
    $scope.levelsTable = new ngTableParams({
      page: 1,
      count: 5,
      sorting: {
        leaveCode: 'asc'
      }
    }, {
      total: data.length,
      getData: function($defer, params) {
        var filteredData, orderedData;
        filteredData = (params.filter() ? $filter("filter")(data, params.filter()) : data);
        orderedData = (params.sorting() ? $filter("orderBy")(filteredData, params.orderBy()) : data);
        params.total(orderedData.length);
        $defer.resolve(orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count()));
      }
    });
  });
  $scope.createNew = function() {
    console.log('adding...');
    levelService.createNewLevel($scope.levelCode, $scope.level, $scope.description).then(function(data) {
      if (data.data.result) {
        console.log('level added');
        console.log(data);
        return $window.location = '#/adminLevels';
      }
    });
  };
  $scope.LevelType = {};
  levelService.retrieveLevelById($stateParams.levelId).then(function(data) {
    $scope.LevelType = {
      levelId: data.data.levelId,
      levelCode: data.data.levelCode,
      level: data.data.levelName,
      description: data.data.description
    };
  });
  $scope.update = function(id) {
    levelService.updateLevel(id, $scope.LevelType.levelCode, $scope.LevelType.level, $scope.LevelType.description).then(function(data) {
      console.log("updating data");
      return $window.location = '#/adminLevels';
    });
  };
  $scope["delete"] = function(id) {
    return levelService.deleteLevel(id).then(function(data) {
      $window.alert("1 Record Deleted Successfully");
      return $window.location.reload();
    });
  };
});

/*
//@ sourceMappingURL=manageLevelCtrl.map
*/
